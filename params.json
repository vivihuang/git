{"name":"Git.vivihuang.GitHub.io","tagline":"小码农和和的博客","body":"#git相关命令\r\n\r\n##创建git版本库\r\n### 1. 初始化  git init\r\n\r\n* 用于对本地仓库进行初始化\r\n\r\n\t    $git init\r\n\r\n* 通过ls -ah命令可以查看隐藏的.git文件\r\n\r\n\t\t$ls -ah\r\n    \r\n###2. 添加文件  git add \r\n\r\n* 将目录添加到版本库，放至暂存区\r\n    \r\n    \t$git add\r\n    \r\n* 添加所有文件\r\n\r\n\t\t$git add --all\r\n    \r\n###3. 提交文件  git commit -m \"\"\r\n\r\n* 将文件从本地目录提交到本地仓库\r\n\r\n\t\t$git commit -m \"hello world\"\r\n\t\r\n###4. 查看提交记录  git log\r\n* 查看本地版本库提交记录\r\n\r\n\t\t$git log\r\n\t\t\r\n###5. 查看git状态  git status\r\n\r\n* 查看本地目录文件的git状态\r\n\r\n\t\t$git status\r\n\r\n##修改本地版本库\r\n\r\n###1. 查看修改情况  git diff\r\n\r\n* 查看本地文件和本地最新版本库的区别\r\n\r\n\t\t$git diff HEAD -- file.name\r\n\t\t$git diff HEAD -- readme.txt\r\n\r\n\t**注意：只能查看未git add的文件**\r\n\r\n###2. 回退版本  git reset \r\n\r\n* 将本地目录退回commit_id版本\r\n\r\n\t\t$git log //查看commit_id\r\n\t\t$git reset --hard commit_id\r\n\r\n* 将本地目录回退至上一次commit之后的版本\r\n\r\n\t\t$git reset --hard HEAD^\r\n\r\n* 显示所有提交及回退记录（包括已回退记录），可用于回退旧版本之后再次回到新版本\r\n\r\n\t\t$git reflog\r\n\r\n###3. 撤销修改\r\n\r\n* 撤销修改，让文件回到最近一次git commit或git add时的状态\r\n\r\n\t\t$git checkout -- file.name\r\n\r\n\r\n\t若未git add，则退回到最新版本库，即最近的git commit版本\r\n\r\n\t若已git add，但未git commit，则退回到git add时的版本\r\n\r\n###4. 删除文件  git rm file.name\r\n* 从版本库中删除文件\r\n\r\n\t\t$git rm file.name\r\n\r\n* 若误删本地目录中的文件可用`git checkout -- file.name`从本地版本库中找回\r\n\r\n\t\t$git checkout -- file.name\r\n\r\n##远程仓库管理\r\n###1. 创建远程库\r\n* 创建SSH Key\r\n\r\n    \t$ ssh-keygen -t rsa -C \"vivihuang126@gmail\"\r\n    \r\n\t之后一直回车，选择默认值，无需设置密码\r\n\r\n\t可以在用户主目录`/usr`里找到隐藏的`.ssh`目录，里面有`id_rsa`和`id_rsa.pub`两个文件，这两个就是SSH Key的秘钥对，`id_rsa`是私钥，不能泄露出去，`id_rsa.pub`是公钥。\r\n\r\n* 登录git\r\n\r\n\t登陆`GitHub`，打开`Account settings`，`SSH Keys`页面:\r\n\t[Account settings/ SSH Keys](https://github.com/settings/ssh)\r\n\t\r\n\t选择`Add SSH Keys`，在`Key`文本框里粘贴`id_rsa.pub`文件的内容，之后点击`Add Key`，完成。\r\n\r\n* 创建new repo\r\n\r\n\t登陆`GitHub`，然后，在右上角找到`Create a new repo`按钮，创建一个新的仓库，填入`Repository name`后选择`Create repository`\r\n\t\r\n* 在本地目录下创建该repo\r\n\r\n\t\t$ git remote add origin https://github.com/vivihuang/repo_name.git\r\n\t\t\r\n* 将本地内容推送至远程库\r\n\r\n\t\t$ git push -u origin master\r\n\t\t\r\n###2. 克隆远程库\r\n\r\n* 从远程库克隆至本地目录\r\n\r\n\t\t$ git clone https://github.com/vivihuang/repo_name.git\r\n\t\t\r\n##分支管理\r\n\r\n###1. 创建与合并分支\r\n\r\n* 创建并切换至`dev`分支\r\n\r\n\t\t$ git branck dev     //创建dev分支\r\n\t\t$ git checkout dev   //切换至dev分支\r\n\t\tSwitched to a new branch 'dev'\r\n\t\t\r\n\t也可直接用\r\n\t\r\n\t\t$ git checkout -b dev\r\n\t\tSwitched to a new branch 'dev'\r\n\t\t\r\n* 查看当前分支\r\n\r\n\t\t$ git branch\r\n\t\t* dev\r\n  \t\t  master\r\n  \t\t  \r\n \t`git branch`命令会列出所有分支，当前分支前面会标一个*号。\r\n \t\r\n \t此时提交则会在`dev`分支上进行提交。\r\n \t\t\r\n * 合并分支\r\n \r\n \t提交之后可再用`git checkout master`切换回`master`分支\r\n \t\r\n \t\t$ git checkout master\r\n \t\tSwitched to branch 'master'\r\n \r\n \t把`dev`分支的工作成果合并到`master`分支上\r\n \t\r\n \t\t$git merge dev\r\n \t\t\r\n \t`git merge`命令用于合并指定分支到当前分支，因此必须在切换分支后使用。\r\n \t\r\n * 删除分支\r\n \r\n \t合并完成后，就可以放心地删除dev分支了：\r\n\r\n\t\t$ git branch -d dev\r\n\t\tDeleted branch dev (was fec145a).\r\n\r\n\t删除后，查看branch，就只剩下master分支了：\r\n\r\n\t\t$ git branch\r\n\t\t* master\r\n\t\t\r\n###2. 解决冲突\r\n\r\n\r\n##Tag管理\r\n\r\n\r\n###1. 打tag\r\n\r\n* 打tag，对当前版本创建版本号\r\n\r\n\t     $ git tag -a v1.0 -m \"version 1.0\"\r\n\t     \r\n* 创建轻量标签\r\n\r\n\t\t$ git tag v0.1.2-light\r\n\t\t\r\n* 创建附注标签\r\n\r\n\t\t$ git tag -a v0.1.2 -m “0.1.2版本”\r\n\t\t\r\n* 给指定的commit打标签\r\n\r\n\t\t$ git tag -a v0.1.1 9fbc3d0\r\n\r\n###2. 发布tag\r\n\r\n* 将v0.1.2标签提交到git服务器\r\n\r\n\t\t$ git push origin v0.1.2\r\n\r\n* 将本地所有标签一次性提交到git服务器\r\n\r\n\t\t $ git push origin —tags \r\n\t\t \r\n###3. 查看tag\r\n\r\n* 打印出当前仓库的所有标签\r\n\r\n\t\t$ git tag\r\n\t\t\r\n* 搜索符合模式的标签\r\n\r\n\t\t$ git tag -l ‘v0.1.*’\r\n\r\n\t\r\n* 切换到某一个tag\r\n\r\n\t\t$ git checkout tag_name\r\n\t\t\r\n* 查看tag版本信息\r\n\r\n\t\t$ git show v0.1.2\r\n\r\n\t\t\r\n###4. 管理tag\r\n\r\n* 删除本地tag\r\n\r\n\t\t$ git tag -d tag_name\r\n\r\n* 删除remote端tag\r\n\r\n\t\t$   git push origin —delete tag <tagname>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}